package com.sparta.week03.controller;

import com.sparta.week03.domain.Memo;
import com.sparta.week03.domain.MemoDeleteRequestDto;
import com.sparta.week03.domain.MemoRepository;
import com.sparta.week03.domain.MemoRequestDto;
import com.sparta.week03.service.MemoService;
import lombok.RequiredArgsConstructor;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RequiredArgsConstructor
@RestController
public class MemoController {

    private final MemoRepository memoRepository;
    private final MemoService memoService;

    @PostMapping("/api/memos")
    public Memo createMemo(@RequestBody MemoRequestDto requestDto) {
        Memo memo = new Memo(requestDto);
        return memoRepository.save(memo);
    }

    @GetMapping("/api/memos")
    public List<Memo> getContents() {
        return memoRepository.findAllByOrderByModifiedAtDesc();
    }

    @PutMapping("/api/memos/{id}")
    public String updateMemo(@PathVariable Long id, @RequestBody MemoRequestDto requestDto) {
        Optional<Memo> memo = memoRepository.findById(id);
        if (memo.get().getPassword().equals(requestDto.getPassword())) {
            memoService.update(id, requestDto);
            return "업데이트 완료";
        } else {
            return "비밀번호 불일치";
        }
    }

    @DeleteMapping("/api/memos/{id}")
    public String deleteMemo(@PathVariable Long id, @RequestBody MemoDeleteRequestDto deleteRequestDto) {
        Optional<Memo> memo = memoRepository.findById(id);
        if (memo.get().getPassword().equals(deleteRequestDto.getPassword())) {
            memoRepository.deleteById(id);
            return "삭제완료";
        } else {
            return "비밀번호 불일치";
        }
    }



    @GetMapping("/api/memos/{id}")
    public Memo getMemos(@PathVariable Long id){
        Memo memo = memoRepository.findById(id).orElseThrow(
                () -> new IllegalArgumentException("contentsId가 존재하지 않습니다."));
        return memo;
    }
}
